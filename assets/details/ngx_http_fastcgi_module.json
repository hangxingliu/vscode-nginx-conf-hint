[
[4,"fastcgi_bind","Makes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `fastcgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.","<p>Makes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>fastcgi_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_bind</strong> <code>address</code> [<code>transparent</code>] | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 0.8.22.</p>"],
[4,"fastcgi_buffer_size","Sets the `size` of the buffer used for reading the first part of the response received from the FastCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.","<p>Sets the <code>size</code> of the buffer used for reading the first part of the response received from the FastCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_buffer_size</strong> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_buffer_size 4k|8k;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_buffering","Enables or disables buffering of responses from the FastCGI server.","<p>Enables or disables buffering of responses from the FastCGI server.</p><p>When buffering is enabled, nginx receives a response from the FastCGI server as soon as possible, saving it into the buffers set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers\">fastcgi_buffers</a> directives. If the whole response does not fit into memory, a part of it can be saved to a <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_path\">temporary file</a> on the disk. Writing to temporary files is controlled by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_max_temp_file_size\">fastcgi_max_temp_file_size</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_file_write_size\">fastcgi_temp_file_write_size</a> directives.</p><p>When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the FastCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size\">fastcgi_buffer_size</a> directive.</p><p>Buffering can also be enabled or disabled by passing “<code>yes</code>” or “<code>no</code>” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_ignore_headers\">fastcgi_ignore_headers</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_buffering</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_buffering on;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.5.6.</p>"],
[4,"fastcgi_buffers","Sets the `number` and `size` of the buffers used for reading a response from the FastCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.","<p>Sets the <code>number</code> and <code>size</code> of the buffers used for reading a response from the FastCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_buffers</strong> <code>number</code> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_buffers 8 4k|8k;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_busy_buffers_size","When [buffering](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering) of responses from the FastCGI server is enabled, limits the total `size` of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, `size` is limited by the size of two buffers set by the [fastcgi\\_buffer\\_size](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size) and [fastcgi\\_buffers](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers) directives.","<p>When <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled, limits the total <code>size</code> of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, <code>size</code> is limited by the size of two buffers set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers\">fastcgi_buffers</a> directives.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_busy_buffers_size</strong> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_busy_buffers_size 8k|16k;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache","Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.","<p>Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The <code>off</code> parameter disables caching inherited from the previous configuration level.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache</strong> <code>zone</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_background_update","Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.","<p>Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_use_stale_updating\">allow</a> the usage of a stale cached response when it is being updated.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_background_update</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_background_update off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.11.10.</p>"],
[4,"fastcgi_cache_bypass","Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:","<p>Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:</p><blockquote class=\"example\"><pre>fastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_cache_bypass $http_pragma    $http_authorization;\n</pre></blockquote><p>Can be used along with the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_no_cache\">fastcgi_no_cache</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_bypass</strong> <code>string</code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_key","Defines a key for caching, for example","<p>Defines a key for caching, for example</p><blockquote class=\"example\"><pre>fastcgi_cache_key localhost:9000$request_uri;\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_key</strong> <code>string</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_lock","When enabled, only one request at a time will be allowed to populate a new cache element identified according to the [fastcgi\\_cache\\_key](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key) directive by passing a request to a FastCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [fastcgi\\_cache\\_lock\\_timeout](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_lock_timeout) directive.","<p>When enabled, only one request at a time will be allowed to populate a new cache element identified according to the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key\">fastcgi_cache_key</a> directive by passing a request to a FastCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_lock_timeout\">fastcgi_cache_lock_timeout</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_lock</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_lock off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.1.12.</p>"],
[4,"fastcgi_cache_lock_age","If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified `time`, one more request may be passed to the FastCGI server.","<p>If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified <code>time</code>, one more request may be passed to the FastCGI server.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_lock_age</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_lock_age 5s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.8.</p>"],
[4,"fastcgi_cache_lock_timeout","Sets a timeout for [fastcgi\\_cache\\_lock](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_lock). When the `time` expires, the request will be passed to the FastCGI server, however, the response will not be cached.","<p>Sets a timeout for <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_lock\">fastcgi_cache_lock</a>. When the <code>time</code> expires, the request will be passed to the FastCGI server, however, the response will not be cached.</p><blockquote class=\"note\">Before 1.7.8, the response could be cached.</blockquote>",["Before 1.7.8, the response could be cached."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_lock_timeout</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_lock_timeout 5s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.1.12.</p>"],
[4,"fastcgi_cache_max_range_offset","Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the FastCGI server and the response will not be cached.","<p>Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the FastCGI server and the response will not be cached.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_max_range_offset</strong> <code>number</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.11.6.</p>"],
[4,"fastcgi_cache_methods","If the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [fastcgi\\_no\\_cache](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_no_cache) directive.","<p>If the client request method is listed in this directive then the response will be cached. “<code>GET</code>” and “<code>HEAD</code>” methods are always added to the list, though it is recommended to specify them explicitly. See also the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_no_cache\">fastcgi_no_cache</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_methods</strong> <code>GET</code> | <code>HEAD</code> | <code>POST</code> ...;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_methods GET HEAD;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 0.7.59.</p>"],
[4,"fastcgi_cache_min_uses","Sets the `number` of requests after which the response will be cached.","<p>Sets the <code>number</code> of requests after which the response will be cached.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_min_uses</strong> <code>number</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_min_uses 1;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_path","Sets the path and other parameters of a cache. Cache data are stored in files. Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL. The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration","<p>Sets the path and other parameters of a cache. Cache data are stored in files. Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL. The <code>levels</code> parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration</p><blockquote class=\"example\"><pre>fastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n</pre></blockquote><p>file names in a cache will look like this:</p><blockquote class=\"example\"><pre>/data/nginx/cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong>\n</pre></blockquote><p>A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the <code>use_temp_path</code> parameter (1.7.10). If this parameter is omitted or set to the value <code>on</code>, the directory set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_path\">fastcgi_temp_path</a> directive for the given location will be used. If the value is set to <code>off</code>, temporary files will be put directly in the cache directory.</p><p>In addition, all active keys and information about data are stored in a shared memory zone, whose <code>name</code> and <code>size</code> are configured by the <code>keys_zone</code> parameter. One megabyte zone can store about 8 thousand keys.</p><blockquote class=\"note\">As part of <a href=\"https://www.f5.com/products\">commercial subscription</a>, the shared memory zone also stores extended cache <a href=\"https://nginx.org/en/docs/http/ngx_http_api_module.html#http_caches_\">information</a>, thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.</blockquote><p>Cached data that are not accessed during the time specified by the <code>inactive</code> parameter get removed from the cache regardless of their freshness. By default, <code>inactive</code> is set to 10 minutes.</p>",["As part of [commercial subscription](https://www.f5.com/products), the shared memory zone also stores extended cache [information](https://nginx.org/en/docs/http/ngx_http_api_module.html#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_path</strong> <code>path</code> [<code>levels</code>=<code>levels</code>] [<code>use_temp_path</code>=<code>on</code>|<code>off</code>] <code>keys_zone</code>=<code>name</code>:<code>size</code> [<code>inactive</code>=<code>time</code>] [<code>max_size</code>=<code>size</code>] [<code>min_free</code>=<code>size</code>] [<code>manager_files</code>=<code>number</code>] [<code>manager_sleep</code>=<code>time</code>] [<code>manager_threshold</code>=<code>time</code>] [<code>loader_files</code>=<code>number</code>] [<code>loader_sleep</code>=<code>time</code>] [<code>loader_threshold</code>=<code>time</code>] [<code>purger</code>=<code>on</code>|<code>off</code>] [<code>purger_files</code>=<code>number</code>] [<code>purger_sleep</code>=<code>time</code>] [<code>purger_threshold</code>=<code>time</code>];</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_purge","Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.","<p>Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key\">cache key</a> is removed. The result of successful operation is indicated by returning the 204 (No Content) response.</p><p>If the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key\">cache key</a> of a purge request ends with an asterisk (“<code>*</code>”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_path\">inactivity</a>, or processed by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#purger\">cache purger</a> (1.7.12), or a client attempts to access them.</p><p>Example configuration:</p><blockquote class=\"example\"><pre>fastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        fastcgi_pass        backend;\n        fastcgi_cache       cache_zone;\n        fastcgi_cache_key   $uri;\n        fastcgi_cache_purge $purge_method;\n    }\n}\n</pre></blockquote><blockquote class=\"note\">This functionality is available as part of our <a href=\"https://www.f5.com/products\">commercial subscription</a>.</blockquote>",["This functionality is available as part of our [commercial subscription](https://www.f5.com/products)."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_purge</strong> string ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.5.7.</p>"],
[4,"fastcgi_cache_revalidate","Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.","<p>Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_revalidate</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_revalidate off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.5.7.</p>"],
[4,"fastcgi_cache_use_stale","Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server. The directive’s parameters match the parameters of the [fastcgi\\_next\\_upstream](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream) directive.","<p>Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server. The directive’s parameters match the parameters of the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream\">fastcgi_next_upstream</a> directive.</p><p>The <code>error</code> parameter also permits using a stale cached response if a FastCGI server to process a request cannot be selected.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_use_stale</strong> <code>error</code> | <code>timeout</code> | <code>invalid_header</code> | <code>updating</code> | <code>http_500</code> | <code>http_503</code> | <code>http_403</code> | <code>http_404</code> | <code>http_429</code> | <code>off</code> ...;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_cache_use_stale off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_cache_valid","Sets caching time for different response codes. For example, the following directives","<p>Sets caching time for different response codes. For example, the following directives</p><blockquote class=\"example\"><pre>fastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 404      1m;\n</pre></blockquote><p>set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.</p><p>If only caching <code>time</code> is specified</p><blockquote class=\"example\"><pre>fastcgi_cache_valid 5m;\n</pre></blockquote><p>then only 200, 301, and 302 responses are cached.</p><p>In addition, the <code>any</code> parameter can be specified to cache any responses:</p><blockquote class=\"example\"><pre>fastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 301      1h;\nfastcgi_cache_valid any      1m;\n</pre></blockquote><p>Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_cache_valid</strong> [<code>code</code> ...] <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_catch_stderr","Sets a string to search for in the error stream of a response received from a FastCGI server. If the `string` is found then it is considered that the FastCGI server has returned an [invalid response](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream). This allows handling application errors in nginx, for example:","<p>Sets a string to search for in the error stream of a response received from a FastCGI server. If the <code>string</code> is found then it is considered that the FastCGI server has returned an <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream\">invalid response</a>. This allows handling application errors in nginx, for example:</p><blockquote class=\"example\"><pre>location /php/ {\n    fastcgi_pass backend:9000;\n    ...\n    fastcgi_catch_stderr \"PHP Fatal error\";\n    fastcgi_next_upstream error timeout invalid_header;\n}\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_catch_stderr</strong> <code>string</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_connect_timeout","Defines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.","<p>Defines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_connect_timeout</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_connect_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_force_ranges","Enables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses.","<p>Enables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_force_ranges off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.7.</p>"],
[4,"fastcgi_hide_header","By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client. The `fastcgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [fastcgi\\_pass\\_header](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_header) directive can be used.","<p>By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client. The <code>fastcgi_hide_header</code> directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_header\">fastcgi_pass_header</a> directive can be used.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_hide_header</strong> <code>field</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_ignore_client_abort","Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response.","<p>Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_ignore_client_abort</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_ignore_client_abort off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_ignore_headers","Disables processing of certain response header fields from the FastCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).","<p>Disables processing of certain response header fields from the FastCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).</p><p>If not disabled, processing of these header fields has the following effect:</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_ignore_headers</strong> <code>field</code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_index","Sets a file name that will be appended after a URI that ends with a slash, in the value of the `$fastcgi_script_name` variable. For example, with these settings","<p>Sets a file name that will be appended after a URI that ends with a slash, in the value of the <code>$fastcgi_script_name</code> variable. For example, with these settings</p><blockquote class=\"example\"><pre>fastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n</pre></blockquote><p>and the “<code>/page.php</code>” request, the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/home/www/scripts/php/page.php</code>”, and with the “<code>/</code>” request it will be equal to “<code>/home/www/scripts/php/index.php</code>”.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_index</strong> <code>name</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_intercept_errors","Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error\\_page](https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page) directive.","<p>Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page\">error_page</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_intercept_errors</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_intercept_errors off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_keep_conn","By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value `on`, nginx will instruct a FastCGI server to keep connections open. This is necessary, in particular, for [keepalive](https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive) connections to FastCGI servers to function.","<p>By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value <code>on</code>, nginx will instruct a FastCGI server to keep connections open. This is necessary, in particular, for <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive\">keepalive</a> connections to FastCGI servers to function.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_keep_conn</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_keep_conn off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.1.4.</p>"],
[4,"fastcgi_limit_rate","Limits the speed of reading the response from the FastCGI server. The `rate` is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the FastCFI server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering) of responses from the FastCGI server is enabled. Parameter value can contain variables (1.27.0).","<p>Limits the speed of reading the response from the FastCGI server. The <code>rate</code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the FastCFI server, the overall rate will be twice as much as the specified limit. The limitation works only if <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled. Parameter value can contain variables (1.27.0).</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_limit_rate</strong> <code>rate</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_limit_rate 0;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.7.</p>"],
[4,"fastcgi_max_temp_file_size","When [buffering](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering) of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the [fastcgi\\_buffer\\_size](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size) and [fastcgi\\_buffers](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum `size` of the temporary file. The size of data written to the temporary file at a time is set by the [fastcgi\\_temp\\_file\\_write\\_size](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_file_write_size) directive.","<p>When <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers\">fastcgi_buffers</a> directives, a part of the response can be saved to a temporary file. This directive sets the maximum <code>size</code> of the temporary file. The size of data written to the temporary file at a time is set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_file_write_size\">fastcgi_temp_file_write_size</a> directive.</p><p>The zero value disables buffering of responses to temporary files.</p><blockquote class=\"note\">This restriction does not apply to responses that will be <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache\">cached</a> or <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_store\">stored</a> on disk.</blockquote>",["This restriction does not apply to responses that will be [cached](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache) or [stored](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_store) on disk."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_max_temp_file_size</strong> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_max_temp_file_size 1024m;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_next_upstream","Specifies in which cases a request should be passed to the next server:","<p>Specifies in which cases a request should be passed to the next server:</p><dl class=\"compact\"><dt><code>error</code></dt><dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd><dt><code>timeout</code></dt><dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd><dt><code>invalid_header</code></dt><dd>a server returned an empty or invalid response;</dd><dt><code>http_500</code></dt><dd>a server returned a response with the code 500;</dd><dt><code>http_503</code></dt><dd>a server returned a response with the code 503;</dd><dt><code>http_403</code></dt><dd>a server returned a response with the code 403;</dd><dt><code>http_404</code></dt><dd>a server returned a response with the code 404;</dd><dt><code>http_429</code></dt><dd>a server returned a response with the code 429 (1.11.13);</dd><dt id=\"non_idempotent\"><code>non_idempotent</code></dt><dd>normally, requests with a <a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2\">non-idempotent</a> method (<code>POST</code>, <code>LOCK</code>, <code>PATCH</code>) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;</dd><dt><code>off</code></dt><dd>disables passing a request to the next server.</dd></dl><p>One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.</p><p>The directive also defines what is considered an <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of <code>http_500</code>, <code>http_503</code>, and <code>http_429</code> are considered unsuccessful attempts only if they are specified in the directive. The cases of <code>http_403</code> and <code>http_404</code> are never considered unsuccessful attempts.</p><p>Passing a request to the next server can be limited by <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream_tries\">the number of tries</a> and by <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream_timeout\">time</a>.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_next_upstream</strong> <code>error</code> | <code>timeout</code> | <code>invalid_header</code> | <code>http_500</code> | <code>http_503</code> | <code>http_403</code> | <code>http_404</code> | <code>http_429</code> | <code>non_idempotent</code> | <code>off</code> ...;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_next_upstream error timeout;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_next_upstream_timeout","Limits the time during which a request can be passed to the [next server](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream). The `0` value turns off this limitation.","<p>Limits the time during which a request can be passed to the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_next_upstream_timeout</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_next_upstream_timeout 0;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.5.</p>"],
[4,"fastcgi_next_upstream_tries","Limits the number of possible tries for passing a request to the [next server](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream). The `0` value turns off this limitation.","<p>Limits the number of possible tries for passing a request to the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_next_upstream_tries</strong> <code>number</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_next_upstream_tries 0;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.5.</p>"],
[4,"fastcgi_no_cache","Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:","<p>Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:</p><blockquote class=\"example\"><pre>fastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_no_cache $http_pragma    $http_authorization;\n</pre></blockquote><p>Can be used along with the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_bypass\">fastcgi_cache_bypass</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_no_cache</strong> <code>string</code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_param","Sets a `parameter` that should be passed to the FastCGI server. The `value` can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `fastcgi_param` directives defined on the current level.","<p>Sets a <code>parameter</code> that should be passed to the FastCGI server. The <code>value</code> can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no <code>fastcgi_param</code> directives defined on the current level.</p><p>The following example shows the minimum required settings for PHP:</p><blockquote class=\"example\"><pre>fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\nfastcgi_param QUERY_STRING    $query_string;\n</pre></blockquote><p>The <code>SCRIPT_FILENAME</code> parameter is used in PHP for determining the script name, and the <code>QUERY_STRING</code> parameter is used to pass request parameters.</p><p>For scripts that process <code>POST</code> requests, the following three parameters are also required:</p><blockquote class=\"example\"><pre>fastcgi_param REQUEST_METHOD  $request_method;\nfastcgi_param CONTENT_TYPE    $content_type;\nfastcgi_param CONTENT_LENGTH  $content_length;\n</pre></blockquote><p>If PHP was built with the <code>--enable-force-cgi-redirect</code> configuration parameter, the <code>REDIRECT_STATUS</code> parameter should also be passed with the value “200”:</p><blockquote class=\"example\"><pre>fastcgi_param REDIRECT_STATUS 200;\n</pre></blockquote><p>If the directive is specified with <code>if_not_empty</code> (1.1.11) then such a parameter will be passed to the server only if its value is not empty:</p><blockquote class=\"example\"><pre>fastcgi_param HTTPS           $https if_not_empty;\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_param</strong> <code>parameter</code> <code>value</code> [<code>if_not_empty</code>];</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_pass","Sets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port:","<p>Sets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port:</p><blockquote class=\"example\"><pre>fastcgi_pass localhost:9000;\n</pre></blockquote><p>or as a UNIX-domain socket path:</p><blockquote class=\"example\"><pre>fastcgi_pass unix:/tmp/fastcgi.socket;\n</pre></blockquote><p>If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html\">server group</a>.</p><p>Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html\">server groups</a>, and, if not found, is determined using a <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver\">resolver</a>.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_pass</strong> <code>address</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>location</code>, <code>if in location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_pass_header","Permits passing [otherwise disabled](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_hide_header) header fields from a FastCGI server to a client.","<p>Permits passing <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_hide_header\">otherwise disabled</a> header fields from a FastCGI server to a client.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_pass_header</strong> <code>field</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_pass_request_body","Indicates whether the original request body is passed to the FastCGI server. See also the [fastcgi\\_pass\\_request\\_headers](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_request_headers) directive.","<p>Indicates whether the original request body is passed to the FastCGI server. See also the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_request_headers\">fastcgi_pass_request_headers</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_pass_request_body</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_pass_request_body on;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_pass_request_headers","Indicates whether the header fields of the original request are passed to the FastCGI server. See also the [fastcgi\\_pass\\_request\\_body](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_request_body) directive.","<p>Indicates whether the header fields of the original request are passed to the FastCGI server. See also the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_request_body\">fastcgi_pass_request_body</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_pass_request_headers</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_pass_request_headers on;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_read_timeout","Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed.","<p>Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_read_timeout</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_read_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_request_buffering","Enables or disables buffering of a client request body.","<p>Enables or disables buffering of a client request body.</p><p>When buffering is enabled, the entire request body is <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size\">read</a> from the client before sending the request to a FastCGI server.</p><p>When buffering is disabled, the request body is sent to the FastCGI server immediately as it is received. In this case, the request cannot be passed to the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_next_upstream\">next server</a> if nginx already started sending the request body.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_request_buffering</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_request_buffering on;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.7.11.</p>"],
[4,"fastcgi_send_lowat","If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either `NOTE_LOWAT` flag of the [kqueue](https://nginx.org/en/docs/events.html#kqueue) method, or the `SO_SNDLOWAT` socket option, with the specified `size`.","<p>If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either <code>NOTE_LOWAT</code> flag of the <a href=\"https://nginx.org/en/docs/events.html#kqueue\">kqueue</a> method, or the <code>SO_SNDLOWAT</code> socket option, with the specified <code>size</code>.</p><p>This directive is ignored on Linux, Solaris, and Windows.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_send_lowat</strong> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_send_lowat 0;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_send_timeout","Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed.","<p>Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_send_timeout</strong> <code>time</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_send_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_socket_keepalive","Configures the “TCP keepalive” behavior for outgoing connections to a FastCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.","<p>Configures the “TCP keepalive” behavior for outgoing connections to a FastCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “<code>on</code>”, the <code>SO_KEEPALIVE</code> socket option is turned on for the socket.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_socket_keepalive</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_socket_keepalive off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.15.6.</p>"],
[4,"fastcgi_split_path_info","Defines a regular expression that captures a value for the `$fastcgi_path_info` variable. The regular expression should have two captures: the first becomes a value of the `$fastcgi_script_name` variable, the second becomes a value of the `$fastcgi_path_info` variable. For example, with these settings","<p>Defines a regular expression that captures a value for the <code>$fastcgi_path_info</code> variable. The regular expression should have two captures: the first becomes a value of the <code>$fastcgi_script_name</code> variable, the second becomes a value of the <code>$fastcgi_path_info</code> variable. For example, with these settings</p><blockquote class=\"example\"><pre>location ~ ^(.+\\.php)(.*)$ {\n    fastcgi_split_path_info       ^(.+\\.php)(.*)$;\n    fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;\n    fastcgi_param PATH_INFO       $fastcgi_path_info;\n</pre></blockquote><p>and the “<code>/show.php/article/0001</code>” request, the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/path/to/php/show.php</code>”, and the <code>PATH_INFO</code> parameter will be equal to “<code>/article/0001</code>”.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_split_path_info</strong> <code>regex</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_store","Enables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](https://nginx.org/en/docs/http/ngx_http_core_module.html#alias) or [root](https://nginx.org/en/docs/http/ngx_http_core_module.html#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the `string` with variables:","<p>Enables saving of files to a disk. The <code>on</code> parameter saves files with paths corresponding to the directives <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#alias\">alias</a> or <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#root\">root</a>. The <code>off</code> parameter disables saving of files. In addition, the file name can be set explicitly using the <code>string</code> with variables:</p><blockquote class=\"example\"><pre>fastcgi_store /data/www$original_uri;\n</pre></blockquote><p>The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_path\">fastcgi_temp_path</a> directive, are put on the same file system.</p><p>This directive can be used to create local copies of static unchangeable files, e.g.:</p><blockquote class=\"example\"><pre>location /images/ {\n    root                 /data/www;\n    error_page           404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    fastcgi_pass         backend:9000;\n    ...\n\n    fastcgi_store        on;\n    fastcgi_store_access user:rw group:rw all:r;\n    fastcgi_temp_path    /data/temp;\n\n    alias                /data/www/;\n}\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_store</strong> <code>on</code> | <code>off</code> | <code>string</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_store off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_store_access","Sets access permissions for newly created files and directories, e.g.:","<p>Sets access permissions for newly created files and directories, e.g.:</p><blockquote class=\"example\"><pre>fastcgi_store_access user:rw group:rw all:r;\n</pre></blockquote><p>If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted:</p><blockquote class=\"example\"><pre>fastcgi_store_access group:rw all:r;\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_store_access</strong> <code>users</code>:<code>permissions</code> ...;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_store_access user:rw;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_temp_file_write_size","Limits the `size` of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled. By default, `size` is limited by two buffers set by the [fastcgi\\_buffer\\_size](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size) and [fastcgi\\_buffers](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers) directives. The maximum size of a temporary file is set by the [fastcgi\\_max\\_temp\\_file\\_size](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_max_temp_file_size) directive.","<p>Limits the <code>size</code> of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled. By default, <code>size</code> is limited by two buffers set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffers\">fastcgi_buffers</a> directives. The maximum size of a temporary file is set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_max_temp_file_size\">fastcgi_max_temp_file_size</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_temp_file_write_size</strong> <code>size</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_temp_file_write_size 8k|16k;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"fastcgi_temp_path","Defines a directory for storing temporary files with data received from FastCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration","<p>Defines a directory for storing temporary files with data received from FastCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration</p><blockquote class=\"example\"><pre>fastcgi_temp_path /spool/nginx/fastcgi_temp 1 2;\n</pre></blockquote><p>a temporary file might look like this:</p><blockquote class=\"example\"><pre>/spool/nginx/fastcgi_temp/<strong>7</strong>/<strong>45</strong>/00000123<strong>457</strong>\n</pre></blockquote><p>See also the <code>use_temp_path</code> parameter of the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_path\">fastcgi_cache_path</a> directive.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>fastcgi_temp_path</strong> <code>path</code> [<code>level1</code> [<code>level2</code> [<code>level3</code>]]];</code><br></td></tr><tr><th>Default:</th><td><pre>fastcgi_temp_path fastcgi_temp;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[5,"<p>The <code>ngx_http_fastcgi_module</code> module supports embedded variables that can be used to set parameters using the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_param\">fastcgi_param</a> directive:</p><dl class=\"compact\"><dt id=\"var_fastcgi_script_name\"><code>$fastcgi_script_name</code></dt><dd>request URI or, if a URI ends with a slash, request URI with an index file name configured by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_index\">fastcgi_index</a> directive appended to it. This variable can be used to set the <code>SCRIPT_FILENAME</code> and <code>PATH_TRANSLATED</code> parameters that determine the script name in PHP. For example, for the “<code>/info/</code>” request with the following directives<blockquote class=\"example\"><pre>fastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n</pre></blockquote>the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/home/www/scripts/php/info/index.php</code>”.<p>When using the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive, the <code>$fastcgi_script_name</code> variable equals the value of the first capture set by the directive.</p></dd><dt id=\"var_fastcgi_path_info\"><code>$fastcgi_path_info</code></dt><dd>the value of the second capture set by the <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive. This variable can be used to set the <code>PATH_INFO</code> parameter.</dd></dl>"]
]
[
[4,"break","Stops processing the current set of `ngx_http_rewrite_module` directives.","<p>Stops processing the current set of <code>ngx_http_rewrite_module</code> directives.</p><p>If a directive is specified inside the <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#location\">location</a>, further processing of the request continues in this location.</p><p>Example:</p><blockquote class=\"example\"><pre>if ($slow) {\n    limit_rate 10k;\n    break;\n}\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>break</strong>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"],
[4,"if","The specified `condition` is evaluated. If true, this module directives specified inside the braces are executed, and the request is assigned the configuration inside the `if` directive. Configurations inside the `if` directives are inherited from the previous configuration level.","<p>The specified <code>condition</code> is evaluated. If true, this module directives specified inside the braces are executed, and the request is assigned the configuration inside the <code>if</code> directive. Configurations inside the <code>if</code> directives are inherited from the previous configuration level.</p><p>A condition may be any of the following:</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>if</strong> (<code>condition</code>) { ... }</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>server</code>, <code>location</code><br></td></tr></tbody></table>"],
[4,"return","Stops processing and returns the specified `code` to a client. The non-standard code 444 closes a connection without sending a response header.","<p>Stops processing and returns the specified <code>code</code> to a client. The non-standard code 444 closes a connection without sending a response header.</p><p>Starting from version 0.8.42, it is possible to specify either a redirect URL (for codes 301, 302, 303, 307, and 308) or the response body <code>text</code> (for other codes). A response body text and redirect URL can contain variables. As a special case, a redirect URL can be specified as a URI local to this server, in which case the full redirect URL is formed according to the request scheme (<code>$scheme</code>) and the <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect\">server_name_in_redirect</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect\">port_in_redirect</a> directives.</p><p>In addition, a <code>URL</code> for temporary redirect with the code 302 can be specified as the sole parameter. Such a parameter should start with the “<code>http://</code>”, “<code>https://</code>”, or “<code>$scheme</code>” string. A <code>URL</code> can contain variables.</p><blockquote class=\"note\">Only the following codes could be returned before version 0.7.51: 204, 400, 402&nbsp;— 406, 408, 410, 411, 413, 416, and 500&nbsp;— 504.</blockquote><blockquote class=\"note\">The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.</blockquote><blockquote class=\"note\">The code 308 was not treated as a redirect until version 1.13.0.</blockquote><p>See also the <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page\">error_page</a> directive.</p>",["Only the following codes could be returned before version 0.7.51: 204, 400, 402 — 406, 408, 410, 411, 413, 416, and 500 — 504.","The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.","The code 308 was not treated as a redirect until version 1.13.0."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>return</strong> <code>code</code> [<code>text</code>];</code><br><code><strong>return</strong> <code>code</code> <code>URL</code>;</code><br><code><strong>return</strong> <code>URL</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"],
[4,"rewrite","If the specified regular expression matches a request URI, URI is changed as specified in the `replacement` string. The `rewrite` directives are executed sequentially in order of their appearance in the configuration file. It is possible to terminate further processing of the directives using flags. If a replacement string starts with “`http://`”, “`https://`”, or “`$scheme`”, the processing stops and the redirect is returned to a client.","<p>If the specified regular expression matches a request URI, URI is changed as specified in the <code>replacement</code> string. The <code>rewrite</code> directives are executed sequentially in order of their appearance in the configuration file. It is possible to terminate further processing of the directives using flags. If a replacement string starts with “<code>http://</code>”, “<code>https://</code>”, or “<code>$scheme</code>”, the processing stops and the redirect is returned to a client.</p><p>An optional <code>flag</code> parameter can be one of:</p><dl class=\"compact\"><dt><code>last</code></dt><dd>stops processing the current set of <code>ngx_http_rewrite_module</code> directives and starts a search for a new location matching the changed URI;</dd><dt><code>break</code></dt><dd>stops processing the current set of <code>ngx_http_rewrite_module</code> directives as with the <a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break\">break</a> directive;</dd><dt><code>redirect</code></dt><dd>returns a temporary redirect with the 302 code; used if a replacement string does not start with “<code>http://</code>”, “<code>https://</code>”, or “<code>$scheme</code>”;</dd><dt><code>permanent</code></dt><dd>returns a permanent redirect with the 301 code.</dd></dl><p>The full redirect URL is formed according to the request scheme (<code>$scheme</code>) and the <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect\">server_name_in_redirect</a> and <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect\">port_in_redirect</a> directives.</p><p>Example:</p><blockquote class=\"example\"><pre>server {\n    ...\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\n    return  403;\n    ...\n}\n</pre></blockquote><p>But if these directives are put inside the “<code>/download/</code>” location, the <code>last</code> flag should be replaced by <code>break</code>, or otherwise nginx will make 10 cycles and return the 500 error:</p><blockquote class=\"example\"><pre>location /download/ {\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\n    return  403;\n}\n</pre></blockquote><p>If a <code>replacement</code> string includes the new request arguments, the previous request arguments are appended after them. If this is undesired, putting a question mark at the end of a replacement string avoids having them appended, for example:</p><blockquote class=\"example\"><pre>rewrite ^/users/(.*)$ /show?user=$1? last;\n</pre></blockquote><p>If a regular expression includes the “<code>}</code>” or “<code>;</code>” characters, the whole expressions should be enclosed in single or double quotes.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>rewrite</strong> <code>regex</code> <code>replacement</code> [<code>flag</code>];</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"],
[4,"rewrite_log","Enables or disables logging of `ngx_http_rewrite_module` module directives processing results into the [error\\_log](https://nginx.org/en/docs/ngx_core_module.html#error_log) at the `notice` level.","<p>Enables or disables logging of <code>ngx_http_rewrite_module</code> module directives processing results into the <a href=\"https://nginx.org/en/docs/ngx_core_module.html#error_log\">error_log</a> at the <code>notice</code> level.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>rewrite_log</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>rewrite_log off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"],
[4,"set","Sets a `value` for the specified `variable`. The `value` can contain text, variables, and their combination.","<p>Sets a <code>value</code> for the specified <code>variable</code>. The <code>value</code> can contain text, variables, and their combination.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>set</strong> <code>$variable</code> <code>value</code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"],
[4,"uninitialized_variable_warn","Controls whether warnings about uninitialized variables are logged.","<p>Controls whether warnings about uninitialized variables are logged.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>uninitialized_variable_warn</strong> <code>on</code> | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>uninitialized_variable_warn on;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if</code><br></td></tr></tbody></table>"]
]